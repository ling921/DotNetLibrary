<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LingDev.EntityFramework</name>
    </assembly>
    <members>
        <member name="T:LingDev.EntityFramework.Entities.Entity`1">
            <summary>
            Defines an entity with a single primary key with "Id" property.
            </summary>
            <typeparam name="TKey">Type of the primary key of the entity.</typeparam>
        </member>
        <member name="P:LingDev.EntityFramework.Entities.Entity`1.Id">
            <inheritdoc/>
        </member>
        <member name="M:LingDev.EntityFramework.Entities.Entity`1.GetKeys">
            <inheritdoc/>
        </member>
        <member name="T:LingDev.EntityFramework.Entities.IEntity">
            <summary>
            Defines an entity. It's primary key may not be "Id" or it may have a composite primary key.
            </summary>
        </member>
        <member name="M:LingDev.EntityFramework.Entities.IEntity.GetKeys">
            <summary>
            Returns an array of ordered keys for this entity.
            </summary>
            <returns></returns>
        </member>
        <member name="T:LingDev.EntityFramework.Entities.IEntity`1">
            <summary>
            Defines an entity with a single primary key with "Id" property.
            </summary>
            <typeparam name="TKey">Type of the primary key of the entity.</typeparam>
        </member>
        <member name="P:LingDev.EntityFramework.Entities.IEntity`1.Id">
            <summary>
            Unique identifier for this entity.
            </summary>
        </member>
        <member name="T:LingDev.EntityFramework.Extensions.QueryableExtensions">
            <summary>
            Extension methods for <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
        </member>
        <member name="M:LingDev.EntityFramework.Extensions.QueryableExtensions.WhereIf``1(System.Linq.IQueryable{``0},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            If condition filters a sequence of values based on a predicate, otherwise not.
            </summary>
            <param name="source">An <see cref="T:System.Linq.IQueryable`1"/> to filter.</param>
            <param name="condition">Condition of filter</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:LingDev.EntityFramework.Extensions.QueryableExtensions.ToPagedAsync``1(System.Linq.IQueryable{``0},System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously get paged results.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">An <see cref="T:System.Linq.IQueryable`1"/> to filter.</param>
            <param name="pageNumber">The current active page, defaults to the first page.</param>
            <param name="pageSize">The number of items per page, defaults to 10.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <returns>The total number of items to be paged, and items of current active page.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:LingDev.EntityFramework.Extensions.QueryableExtensions.ToPagedAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously get paged results, and projects each element of a sequence into a new form.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TResult">The type of the elements of result.</typeparam>
            <param name="source">An <see cref="T:System.Linq.IQueryable`1"/> to filter.</param>
            <param name="selector">A projection function to apply to each element.</param>
            <param name="pageNumber">The current active page, defaults to the first page.</param>
            <param name="pageSize">The number of items per page, defaults to 10.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <returns>The total number of items to be paged, and items of current active page.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:LingDev.EntityFramework.Extensions.QueryableExtensions.ToPagedAsync``2(System.Linq.IQueryable{``0},System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1}},System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously get paged results, and projects each element of a sequence into a new form.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TResult">The type of the elements of result.</typeparam>
            <param name="source">An <see cref="T:System.Linq.IQueryable`1"/> to filter.</param>
            <param name="projector">A projector to project each element of a sequence into a new form.</param>
            <param name="pageNumber">The current active page, defaults to the first page.</param>
            <param name="pageSize">The number of items per page, defaults to 10.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <returns>The total number of items to be paged, and items of current active page.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="T:LingDev.EntityFramework.Interfaces.IRepository`1">
            <summary>
            Interface to base repository methods.
            </summary>
            <typeparam name="TEntity">Type of entity.</typeparam>
        </member>
        <member name="M:LingDev.EntityFramework.Interfaces.IRepository`1.CreateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Add an entity to database. If in a transaction, this won't save to the database immediately.
            </summary>
            <param name="entity">Entity to insert into database.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation. The task result contains the number of state entries written to the database.</returns>
        </member>
        <member name="M:LingDev.EntityFramework.Interfaces.IRepository`1.CreateManyAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            Add many entities to database. If in a transaction, this won't save to the database immediately.
            </summary>
            <param name="entities">Entities to insert into database.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation. The task result contains the number of state entries written to the database.</returns>
        </member>
        <member name="M:LingDev.EntityFramework.Interfaces.IRepository`1.Query(Microsoft.EntityFrameworkCore.QueryTrackingBehavior)">
            <summary>
            Get queryable entities.
            </summary>
            <param name="trackingBehavior">The entity tracking behavior.</param>
            <returns>An <see cref="T:System.Linq.IQueryable`1"/> entities.</returns>
        </member>
        <member name="M:LingDev.EntityFramework.Interfaces.IRepository`1.GetListAsync(System.Threading.CancellationToken)">
            <summary>
            Get all entities.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <returns>A task that represents the asynchronous operation. The task result contains a <see cref="T:System.Collections.Generic.List`1"/> that contains contains entities that satisfy the condition specified by predicate.</returns>
            <exception cref="T:System.OperationCanceledException"></exception>
        </member>
        <member name="M:LingDev.EntityFramework.Interfaces.IRepository`1.GetListAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Get list of entities that satisfy the condition.
            </summary>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <returns>A task that represents the asynchronous operation. The task result contains a <see cref="T:System.Collections.Generic.List`1"/> that contains contains entities that satisfy the condition specified by predicate.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.OperationCanceledException"></exception>
        </member>
        <member name="M:LingDev.EntityFramework.Interfaces.IRepository`1.SingleOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <inheritdoc cref="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:LingDev.EntityFramework.Interfaces.IRepository`1.FirstOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <inheritdoc cref="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:LingDev.EntityFramework.Interfaces.IRepository`1.LastOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <inheritdoc cref="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.LastOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:LingDev.EntityFramework.Interfaces.IRepository`1.AnyAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <inheritdoc cref="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:LingDev.EntityFramework.Interfaces.IRepository`1.UpdateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Update an entity in database. If in a transaction, this won't save to the database immediately.
            </summary>
            <param name="entity">Entity to update into database.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation. The task result contains the number of state entries written to the database.</returns>
        </member>
        <member name="M:LingDev.EntityFramework.Interfaces.IRepository`1.UpdateManyAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            Update many entities in database. If in a transaction, this won't save to the database immediately.
            </summary>
            <param name="entities">Entities to update into database.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation. The task result contains the number of state entries written to the database.</returns>
        </member>
        <member name="M:LingDev.EntityFramework.Interfaces.IRepository`1.DeleteAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Remove an entity from database. If in a transaction, this won't save to the database immediately.
            </summary>
            <param name="entity">Entity to remove from database.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation. The task result contains the number of state entries written to the database.</returns>
        </member>
        <member name="M:LingDev.EntityFramework.Interfaces.IRepository`1.DeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Remove entities from database that satisfy the condition. If in a transaction, this won't save to the database immediately.
            </summary>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation. The task result contains the number of state entries written to the database.</returns>
        </member>
        <member name="M:LingDev.EntityFramework.Interfaces.IRepository`1.DeleteManyAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            Remove many entities from database. If in a transaction, this won't save to the database immediately.
            </summary>
            <param name="entities">Entities to remove from database.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation. The task result contains the number of state entries written to the database.</returns>
        </member>
        <member name="T:LingDev.EntityFramework.Interfaces.IRepository`2">
            <summary>
            Interface to base repository methods.
            </summary>
            <typeparam name="TEntity">Type of entity.</typeparam>
            <typeparam name="TKey">Type of entity primary key.</typeparam>
        </member>
        <member name="M:LingDev.EntityFramework.Interfaces.IRepository`2.GetByIdAsync(`1,System.Threading.CancellationToken)">
            <summary>
            Get entity with the specific Id.
            </summary>
            <param name="id">Id</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <returns>Entity with the specific id or null if not found.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:System.OperationCanceledException"></exception>
        </member>
        <member name="M:LingDev.EntityFramework.Interfaces.IRepository`2.UpdateAsync(`1,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            Update an entity with changed properties.
            </summary>
            <param name="id">Id of entity.</param>
            <param name="properties">Properties to update.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation. The task result contains the number of state entries written to the database.</returns>
        </member>
        <member name="M:LingDev.EntityFramework.Interfaces.IRepository`2.DeleteAsync(`1,System.Threading.CancellationToken)">
            <summary>
            Remove an entity from database by Id.
            </summary>
            <param name="id">Id of entity.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation. The task result contains the number of state entries written to the database.</returns>
        </member>
        <member name="M:LingDev.EntityFramework.Interfaces.IRepository`2.DeleteManyAsync(System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)">
            <summary>
            Remove many entities from database.
            </summary>
            <param name="ids">Ids of entity.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation. The task result contains the number of state entries written to the database.</returns>
        </member>
        <member name="T:LingDev.EntityFramework.Interfaces.IUnitOfWork`1">
            <summary>
            The unit of work for database transaction.
            </summary>
            <typeparam name="TDbContext">Type of databse context.</typeparam>
        </member>
        <member name="P:LingDev.EntityFramework.Interfaces.IUnitOfWork`1.IsInTransaction">
            <summary>
            Whether the transaction is in progress.
            </summary>
        </member>
        <member name="M:LingDev.EntityFramework.Interfaces.IUnitOfWork`1.BeginTransactionAsync(System.Threading.CancellationToken)">
            <summary>
            <inheritdoc cref="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.BeginTransactionAsync(System.Threading.CancellationToken)"/>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <exception cref="T:System.OperationCanceledException"/>
            <exception cref="T:System.InvalidOperationException"/>
            <returns><inheritdoc cref="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.BeginTransactionAsync(System.Threading.CancellationToken)"/></returns>
        </member>
        <member name="M:LingDev.EntityFramework.Interfaces.IUnitOfWork`1.CreateSavePointAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            <inheritdoc cref="M:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction.CreateSavepointAsync(System.String,System.Threading.CancellationToken)"/>
            </summary>
            <param name="name"><inheritdoc cref="M:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction.CreateSavepointAsync(System.String,System.Threading.CancellationToken)"/></param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <exception cref="T:System.OperationCanceledException"/>
            <exception cref="T:System.InvalidOperationException"/>
            <returns><inheritdoc cref="M:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction.CreateSavepointAsync(System.String,System.Threading.CancellationToken)"/></returns>
        </member>
        <member name="M:LingDev.EntityFramework.Interfaces.IUnitOfWork`1.CommitAsync(System.Threading.CancellationToken)">
            <summary>
            Commits all changes made to the database in the current transaction asynchronously. Rolling back if commit failed.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <exception cref="T:System.OperationCanceledException"/>
            <exception cref="T:System.InvalidOperationException"/>
            <returns><inheritdoc cref="M:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction.CommitAsync(System.Threading.CancellationToken)"/></returns>
        </member>
        <member name="M:LingDev.EntityFramework.Interfaces.IUnitOfWork`1.CommitAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Commits all changes made to the database in the current transaction asynchronously. Rolling back to save point if commit failed.
            </summary>
            <param name="savePointName">Name of save point.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <exception cref="T:System.OperationCanceledException"/>
            <exception cref="T:System.InvalidOperationException"/>
            <returns><inheritdoc cref="M:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction.CommitAsync(System.Threading.CancellationToken)"/></returns>
        </member>
        <member name="M:LingDev.EntityFramework.Interfaces.IUnitOfWork`1.RollbackAsync(System.Threading.CancellationToken)">
            <summary>
            <inheritdoc cref="M:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction.RollbackAsync(System.Threading.CancellationToken)"/>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <exception cref="T:System.OperationCanceledException"/>
            <exception cref="T:System.InvalidOperationException"/>
            <returns><inheritdoc cref="M:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction.RollbackAsync(System.Threading.CancellationToken)"/></returns>
        </member>
        <member name="M:LingDev.EntityFramework.Interfaces.IUnitOfWork`1.RollbackToSavepointAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            <inheritdoc cref="M:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction.RollbackToSavepointAsync(System.String,System.Threading.CancellationToken)"/>
            </summary>
            <param name="name"><inheritdoc cref="M:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction.RollbackToSavepointAsync(System.String,System.Threading.CancellationToken)"/></param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <exception cref="T:System.OperationCanceledException"/>
            <exception cref="T:System.InvalidOperationException"/>
            <returns><inheritdoc cref="M:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction.RollbackToSavepointAsync(System.String,System.Threading.CancellationToken)"/></returns>
        </member>
        <member name="T:LingDev.EntityFramework.Repository`2">
            <summary>
            Implementation to base repository methods.
            </summary>
            <typeparam name="TDbContext">Type of database context.</typeparam>
            <typeparam name="TEntity">Type of entity.</typeparam>
        </member>
        <member name="F:LingDev.EntityFramework.Repository`2.Context">
            <summary>
            The database context.
            </summary>
        </member>
        <member name="F:LingDev.EntityFramework.Repository`2.UnitOfWork">
            <summary>
            The <see cref="T:LingDev.EntityFramework.Interfaces.IUnitOfWork`1"/> to handle transaction.
            </summary>
        </member>
        <member name="P:LingDev.EntityFramework.Repository`2.Entities">
            <summary>
            The entities of this repository.
            </summary>
        </member>
        <member name="M:LingDev.EntityFramework.Repository`2.#ctor(`0,LingDev.EntityFramework.Interfaces.IUnitOfWork{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:LingDev.EntityFramework.Repository`2"/>.
            </summary>
            <param name="context">The database context.</param>
            <param name="unitOfWork">The unit of work.</param>
        </member>
        <member name="M:LingDev.EntityFramework.Repository`2.CreateAsync(`1,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:LingDev.EntityFramework.Repository`2.CreateManyAsync(System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:LingDev.EntityFramework.Repository`2.Query(Microsoft.EntityFrameworkCore.QueryTrackingBehavior)">
            <inheritdoc/>
        </member>
        <member name="M:LingDev.EntityFramework.Repository`2.GetListAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:LingDev.EntityFramework.Repository`2.GetListAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:LingDev.EntityFramework.Repository`2.SingleOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:LingDev.EntityFramework.Repository`2.FirstOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:LingDev.EntityFramework.Repository`2.LastOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:LingDev.EntityFramework.Repository`2.AnyAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:LingDev.EntityFramework.Repository`2.UpdateAsync(`1,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:LingDev.EntityFramework.Repository`2.UpdateManyAsync(System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:LingDev.EntityFramework.Repository`2.DeleteAsync(`1,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:LingDev.EntityFramework.Repository`2.DeleteAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:LingDev.EntityFramework.Repository`2.DeleteManyAsync(System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:LingDev.EntityFramework.Repository`3">
            <summary>
            Implementation to base repository methods.
            </summary>
            <typeparam name="TDbContext">Type of database context.</typeparam>
            <typeparam name="TEntity">Type of entity.</typeparam>
            <typeparam name="TKey">Type of entity primary key.</typeparam>
        </member>
        <member name="M:LingDev.EntityFramework.Repository`3.#ctor(`0,LingDev.EntityFramework.Interfaces.IUnitOfWork{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:LingDev.EntityFramework.Repository`3"/>.
            </summary>
            <param name="context">The database context.</param>
            <param name="unitOfWork">The work unit.</param>
        </member>
        <member name="M:LingDev.EntityFramework.Repository`3.GetByIdAsync(`2,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:LingDev.EntityFramework.Repository`3.UpdateAsync(`2,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:LingDev.EntityFramework.Repository`3.DeleteAsync(`2,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:LingDev.EntityFramework.Repository`3.DeleteManyAsync(System.Collections.Generic.IEnumerable{`2},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:LingDev.EntityFramework.UnitOfWork`1">
            <summary>
            The unit of work for database transaction.
            </summary>
            <typeparam name="TDbContext">Type of databse context.</typeparam>
        </member>
        <member name="F:LingDev.EntityFramework.UnitOfWork`1.Logger">
            <summary>
            Logger.
            </summary>
        </member>
        <member name="P:LingDev.EntityFramework.UnitOfWork`1.IsInTransaction">
            <inheritdoc/>
        </member>
        <member name="M:LingDev.EntityFramework.UnitOfWork`1.#ctor(Microsoft.Extensions.Logging.ILogger{LingDev.EntityFramework.UnitOfWork{`0}},`0)">
            <summary>
            Constructor
            </summary>
            <param name="logger">Logger.</param>
            <param name="context">Database context.</param>
        </member>
        <member name="M:LingDev.EntityFramework.UnitOfWork`1.BeginTransactionAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:LingDev.EntityFramework.UnitOfWork`1.CreateSavePointAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:LingDev.EntityFramework.UnitOfWork`1.CommitAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:LingDev.EntityFramework.UnitOfWork`1.CommitAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:LingDev.EntityFramework.UnitOfWork`1.RollbackAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:LingDev.EntityFramework.UnitOfWork`1.RollbackToSavepointAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:LingDev.EntityFramework.UnitOfWork`1.EnsureTransaction">
            <summary>
            Ensure created.
            </summary>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
    </members>
</doc>
